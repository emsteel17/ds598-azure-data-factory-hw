{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "emmadf"
		},
		"emmaDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'emmaDataLakeStorage'"
		},
		"OpenWeatherAPIhistoricalAirPollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"emmaDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://emmastorage.dfs.core.windows.net/"
		},
		"emmaKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://emmavaultofsecrets.vault.azure.net/"
		},
		"openWeatherAPIweather_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherAPIhistoricalAirPollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('OpenWeatherAPIhistoricalAirPollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/emmaDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('emmaDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('emmaDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/emmaKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('emmaKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/openWeatherAPIweather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('openWeatherAPIweather_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BronzeSink_HistoricalAirPollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emmaDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "test"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emmaDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze_Source_Weather_Historical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openWeatherAPIweather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float",
						"defaultValue": 42.3601
					},
					"lon": {
						"type": "float",
						"defaultValue": -71.0589
					},
					"dataType": {
						"type": "string",
						"defaultValue": "hour"
					},
					"start": {
						"type": "string",
						"defaultValue": "@item().start"
					},
					"end": {
						"type": "string",
						"defaultValue": "@item().end"
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/openWeatherAPIweather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalAirPollutionBronzeSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherAPIhistoricalAirPollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float",
						"defaultValue": 42.3601
					},
					"lon": {
						"type": "float",
						"defaultValue": -71.0589
					},
					"start": {
						"type": "int",
						"defaultValue": 1697760000
					},
					"end": {
						"type": "int",
						"defaultValue": 1695168000
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherAPIhistoricalAirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emmaDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "data/2.5/history",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emmaDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emmaDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emmaDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hw2data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emmaDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emmaDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emmaDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "history1fc0ba6f5a73566f43239ec65415572bf337b7bd219438b6d00d2238c996fc4f",
						"folderPath": "historical_airpollution_bronze/data/2.5/air_pollution",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"main": {
										"type": "object",
										"properties": {
											"aqi": {
												"type": "integer"
											}
										}
									},
									"components": {
										"type": "object",
										"properties": {
											"co": {
												"type": "number"
											},
											"no": {
												"type": "number"
											},
											"no2": {
												"type": "number"
											},
											"o3": {
												"type": "number"
											},
											"so2": {
												"type": "number"
											},
											"pm2_5": {
												"type": "number"
											},
											"pm10": {
												"type": "number"
											},
											"nh3": {
												"type": "number"
											}
										}
									},
									"dt": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emmaDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emmaDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emmaDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://emmavaultofsecrets.vault.azure.net/secrets/OpenWeatherAPIKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.dateRanges",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Bronze_Source_Weather_Historical",
											"type": "DatasetReference",
											"parameters": {
												"lat": 42.3601,
												"lon": -71.0589,
												"dataType": "hour",
												"start": "@item().start",
												"end": "@item().end",
												"appid": "@activity('Web1').output.value"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "hw2data",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					},
					"dateRanges": {
						"type": "array",
						"defaultValue": [
							{
								"start": "1694373328",
								"end": "1694978128"
							},
							{
								"start": "1694978128",
								"end": "1695582928"
							},
							{
								"start": "1695582928",
								"end": "1696187728"
							},
							{
								"start": "1696187728",
								"end": "1696792528"
							},
							{
								"start": "1696792528",
								"end": "1697397328"
							},
							{
								"start": "1697397328",
								"end": "1698002128"
							},
							{
								"start": "1698002128",
								"end": "1698606928"
							},
							{
								"start": "1698606928",
								"end": "1699215328"
							},
							{
								"start": "1699215328",
								"end": "1699820128"
							},
							{
								"start": "1699820128",
								"end": "1700424928"
							},
							{
								"start": "1700424928",
								"end": "1701029728"
							},
							{
								"start": "1701029728",
								"end": "1701634528"
							},
							{
								"start": "1701634528",
								"end": "1702239328"
							},
							{
								"start": "1702239328",
								"end": "1702844128"
							},
							{
								"start": "1702844128",
								"end": "1703448928"
							},
							{
								"start": "1703448928",
								"end": "1704053728"
							},
							{
								"start": "1704053728",
								"end": "1704658528"
							},
							{
								"start": "1704658528",
								"end": "1705263328"
							},
							{
								"start": "1705263328",
								"end": "1705868128"
							},
							{
								"start": "1705868128",
								"end": "1706472928"
							},
							{
								"start": "1706472928",
								"end": "1707077728"
							},
							{
								"start": "1707077728",
								"end": "1707682528"
							},
							{
								"start": "1707682528",
								"end": "1708287328"
							},
							{
								"start": "1708287328",
								"end": "1708892128"
							},
							{
								"start": "1708892128",
								"end": "1709496928"
							},
							{
								"start": "1709496928",
								"end": "1710098128"
							},
							{
								"start": "1710098128",
								"end": "1710702928"
							},
							{
								"start": "1710702928",
								"end": "1711307728"
							},
							{
								"start": "1711307728",
								"end": "1711912528"
							},
							{
								"start": "1711912528",
								"end": "1712517328"
							},
							{
								"start": "1712517328",
								"end": "1713122128"
							},
							{
								"start": "1713122128",
								"end": "1713726928"
							},
							{
								"start": "1713726928",
								"end": "1714331728"
							},
							{
								"start": "1714331728",
								"end": "1714936528"
							},
							{
								"start": "1714936528",
								"end": "1715541328"
							},
							{
								"start": "1715541328",
								"end": "1716146128"
							},
							{
								"start": "1716146128",
								"end": "1716750928"
							},
							{
								"start": "1716750928",
								"end": "1717355728"
							},
							{
								"start": "1717355728",
								"end": "1717960528"
							},
							{
								"start": "1717960528",
								"end": "1718565328"
							},
							{
								"start": "1718565328",
								"end": "1719170128"
							},
							{
								"start": "1719170128",
								"end": "1719774928"
							},
							{
								"start": "1719774928",
								"end": "1720379728"
							},
							{
								"start": "1720379728",
								"end": "1720984528"
							},
							{
								"start": "1720984528",
								"end": "1721589328"
							},
							{
								"start": "1721589328",
								"end": "1722194128"
							},
							{
								"start": "1722194128",
								"end": "1722798928"
							},
							{
								"start": "1722798928",
								"end": "1723403728"
							},
							{
								"start": "1723403728",
								"end": "1724008528"
							},
							{
								"start": "1724008528",
								"end": "1724613328"
							},
							{
								"start": "1724613328",
								"end": "1725218128"
							},
							{
								"start": "1725218128",
								"end": "1725822928"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Bronze_Source_Weather_Historical')]",
				"[concat(variables('factoryId'), '/datasets/hw2data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://emmavaultofsecrets.vault.azure.net/secrets/OpenWeatherAPIKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HistoricalAirPollutionBronzeSource",
								"type": "DatasetReference",
								"parameters": {
									"lat": 42.3601,
									"lon": -71.0589,
									"start": 1695313134,
									"end": 1726935534,
									"appid": "@activity('Web1').output.value"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BronzeSink_HistoricalAirPollution",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HistoricalAirPollutionBronzeSource')]",
				"[concat(variables('factoryId'), '/datasets/BronzeSink_HistoricalAirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PreprocessWeatherData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "weather"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flattenedWeatherData"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          calctime as double,",
						"          city_id as boolean,",
						"          cnt as short,",
						"          cod as short,",
						"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double), snow as ({1h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
						"          message as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> weather",
						"weather foldDown(unroll(list),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          icon = list.weather.icon,",
						"          id = list.weather.id,",
						"          main = list.weather.main,",
						"          deg = list.wind.deg,",
						"          gust = list.wind.gust,",
						"          speed = list.wind.speed,",
						"          rain_1h = list.rain.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenedWeatherData",
						"flattenedWeatherData derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp = round(temp),",
						"          feels_like = round(feels_like),",
						"          temp_min = round(temp_min),",
						"          temp_max = round(temp_max),",
						"          temp_C = round(temp - 273.15),",
						"          feels_like_C = round(feels_like - 273.15),",
						"          temp_min_C = round(temp_min - 273.15),",
						"          temp_max_C = round(temp_max - 273.15),",
						"          temp_F = round((temp - 273.15) * 9/5 + 3),",
						"          feels_like_F = round((feels_like - 273.15) * 9/5 + 32),",
						"          temp_min_F = round((temp_min - 273.15) * 9/5 + 32),",
						"          temp_max_F = round((temp_max - 273.15) * 9/5 + 32),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(split(toString(id[1]), ': ')[1]),",
						"          weather_main_value = split(toString(main[1]), ': ')[1],",
						"          weather_description_value = split(toString(weather_description[1]), ': ')[1],",
						"          weather_icon_value = split(toString(icon[1]), ': ')[1],",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all,",
						"          timestamp,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          weather_description,",
						"          icon,",
						"          id,",
						"          main,",
						"          deg,",
						"          gust,",
						"          speed,",
						"          rain_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          temp_C,",
						"          feels_like_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          temp_F,",
						"          feels_like_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['silver_weather_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PreprocessWeatherData_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "weather"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flattenedWeatherData"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          calctime as double,",
						"          city_id as boolean,",
						"          cnt as short,",
						"          cod as short,",
						"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double), snow as ({1h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
						"          message as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> weather",
						"weather foldDown(unroll(list),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          icon = list.weather.icon,",
						"          id = list.weather.id,",
						"          main = list.weather.main,",
						"          deg = list.wind.deg,",
						"          gust = list.wind.gust,",
						"          speed = list.wind.speed,",
						"          rain_1h = list.rain.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenedWeatherData",
						"flattenedWeatherData derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp = round(temp),",
						"          feels_like = round(feels_like),",
						"          temp_min = round(temp_min),",
						"          temp_max = round(temp_max),",
						"          temp_C = round(temp - 273.15),",
						"          feels_like_C = round(feels_like - 273.15),",
						"          temp_min_C = round(temp_min - 273.15),",
						"          temp_max_C = round(temp_max - 273.15),",
						"          temp_F = round((temp - 273.15) * 9/5 + 3),",
						"          feels_like_F = round((feels_like - 273.15) * 9/5 + 32),",
						"          temp_min_F = round((temp_min - 273.15) * 9/5 + 32),",
						"          temp_max_F = round((temp_max - 273.15) * 9/5 + 32),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(split(toString(id[1]), ': ')[1]),",
						"          weather_main_value = split(toString(main[1]), ': ')[1],",
						"          weather_description_value = split(toString(weather_description[1]), ': ')[1],",
						"          weather_icon_value = split(toString(icon[1]), ': ')[1],",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all,",
						"          timestamp,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          weather_description,",
						"          icon,",
						"          id,",
						"          main,",
						"          deg,",
						"          gust,",
						"          speed,",
						"          rain_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          temp_C,",
						"          feels_like_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          temp_F,",
						"          feels_like_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['silver_weather_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PreprocessAirPollutionData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet2",
								"type": "DatasetReference"
							},
							"name": "out"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lon as double, lat as double),",
						"          list as (main as (aqi as integer), components as (co as double, no as double, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 foldDown(unroll(list),",
						"     mapColumn(",
						"          lon = coord.lon,",
						"          lat = coord.lat,",
						"          aqi = list.main.aqi,",
						"          co = list.components.co,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          so2 = list.components.so2,",
						"          pm2_5 = list.components.pm2_5,",
						"          pm10 = list.components.pm10,",
						"          nh3 = list.components.nh3,",
						"          timestamp = list.dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(aqi) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          co = round(co, 2),",
						"          no = round(no, 2),",
						"          no2 = round(no2, 2),",
						"          o3 = round(o3, 2),",
						"          so2 = round(so2, 2),",
						"          pm2_5 = round(pm2_5, 2),",
						"          pm10 = round(pm10, 2),",
						"          nh3 = round(nh3, 2)) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          lon,",
						"          lat,",
						"          aqi,",
						"          co,",
						"          no,",
						"          no2,",
						"          o3,",
						"          so2,",
						"          pm2_5,",
						"          pm10,",
						"          nh3,",
						"          timestamp,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['silver_airpollution_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> out"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/datasets/Parquet2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PreprocessWeatherData_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PreprocessWeatherData_copy1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"weather": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PreprocessWeatherData_copy1')]"
			]
		}
	]
}